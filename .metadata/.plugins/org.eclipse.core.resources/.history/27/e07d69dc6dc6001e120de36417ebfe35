package com.project.Java8code;

import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Test {

	public static void main(String[] args) {

		List<Employee> emp = Arrays.asList(new Employee(1, "Akshay", 50000.0, "HR", "M"),
				new Employee(2, "Vaibhav", 70000.0, "IT", "M"), new Employee(3, "Abhinetri", 60000.0, "HR", "F"),
				new Employee(4, "Vikashi", 30000.0, "IT", "F"), new Employee(5, "Ajinkya", 20000.0, "HR", "M"),
				new Employee(6, "vishakha", 40000.0, "IT", "F"), new Employee(7, "Vinita", 80000.0, "HR", "F"),
				new Employee(7, "Vaishali", 80000.0, "IT", "F"));

		double salaryOf3rdHighest = emp.stream().map(Employee::getSalary).sorted(Collections.reverseOrder()).skip(2)
				.findFirst().get();

		System.out.println(salaryOf3rdHighest);
		
		System.out.println("**************************************************************************************************************");

		List<Integer> ids = emp.stream().filter(e -> e.getSalary() > 50000).map(Employee::getId)
				.collect(Collectors.toList());

		System.out.println(ids);
		
		System.out.println("**************************************************************************************************************");

		List increaseSalary = emp.stream().filter(e -> e.getSalary() < 40000).map(e -> (e.getSalary() + 2000))
				.collect(Collectors.toList());
		System.out.println(increaseSalary);
		
		System.out.println("**************************************************************************************************************");

		Map<String, Long> relist = emp.stream()
				.collect(Collectors.groupingBy((Employee::getGender), Collectors.counting()));
		System.out.println(relist);
		
		System.out.println("**************************************************************************************************************");

		List<Double> increSalary = emp.stream().filter(e -> (e.getSalary() > 30000)).map(e -> (e.getSalary() * 1.20))
				.collect(Collectors.toList());

		System.out.println(increSalary);
		
		System.out.println("**************************************************************************************************************");
		Map<String, Double> avarageSalaryOfEachDept = emp.stream().collect(
				Collectors.groupingBy(Employee::getDepartment, Collectors.averagingDouble(Employee::getSalary)));

		System.out.println(avarageSalaryOfEachDept);
		
		System.out.println("**************************************************************************************************************");
		Map<String, Double> avarageSalaryOfEachGender = emp.stream()
				.collect(Collectors.groupingBy(Employee::getGender, Collectors.averagingDouble(Employee::getSalary)));

		System.out.println(avarageSalaryOfEachGender);
		
		System.out.println("**************************************************************************************************************");
		
		String inputString = "Java Concept Of The Day";
		Map<Character, Long> frequecyOfCharacters = inputString.chars().mapToObj(c -> (char) c)
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		System.out.println(frequecyOfCharacters);
		
		System.out.println("**************************************************************************************************************");
		Map<String, Long> repeatedCharacter = Arrays.stream(inputString.split(""))
				.collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()));
		System.out.println(repeatedCharacter);
		
		System.out.println("**************************************************************************************************************");
	}
}
